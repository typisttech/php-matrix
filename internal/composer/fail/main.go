package main

import (
	"os"
	"text/template"

	"github.com/typisttech/php-matrix/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/composer/fail/main.go"
# Test the "{{ .Name }}" case

! exec php-matrix composer {{ .Mode }}
! stdout .
cmp stderr stderr.golden

! exec php-matrix composer {{ .Mode }} --source=auto
! stdout .
cmp stderr stderr.golden

! exec php-matrix composer {{ .Mode }} --source=php.net
! stdout .
cmp stderr stderr.golden

! exec php-matrix composer {{ .Mode }} --source=offline
! stdout .
cmp stderr stderr.golden

-- stderr.golden --

-- composer.json --
{{ .ComposerJSON }}
`

var rawCases = []rawData{
	{`no "require.php" is set/1`, `{"require":{"some/package":"^1.0"}}`},
	{`no "require.php" is set/2`, `{"require":{}}`},
	{`no "require.php" is set/3`, `{"require":123}`},
	{`no "require.php" is set/4`, `{"require-dev":{"php":"^1.0"}}`},
	{`no "require.php" is set/5`, `{"php":"^1.0"}`},
	{`no "require.php" is set/6`, `{}`},

	{`"require.php" is not a string/null`, `{"require":{"php":null}}`},
	{`"require.php" is not a string/object`, `{"require":{"php":{}}}`},
	{`"require.php" is not a string/array`, `{"require":{"php":[]}}`},
	{`"require.php" is not a string/integer`, `{"require":{"php":123}}`},
	{`"require.php" is not a string/float`, `{"require":{"php":12.3}}`},
	{`"require.php" is not a string/true`, `{"require":{"php":true}}`},
	{`"require.php" is not a string/false`, `{"require":{"php":false}}`},

	{`"require.php" is not a valid constraint/ruby`, `{"require":{"php":"~>1.0"}}`},
	{`"require.php" is not a valid constraint/empty string`, `{"require":{"php":""}}`},
	{`"require.php" is not a valid constraint/invalid string`, `{"require":{"php":"invalid constraint"}}`},

	{`unsatisfiable/1`, `{"require":{"php":">8.0 <7.0"}}`},
	{`unsatisfiable/2`, `{"require":{"php":">999"}}`},
	{`unsatisfiable/3`, `{"require":{"php":"dev-master"}}`},

	{`invalid json`, `{invalid json`},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type rawData struct {
	name         string
	ComposerJSON string
}

type data struct {
	Mode string
	rawData
}

func (d data) Name() string {
	return d.name
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	var cases []data
	for _, mode := range internal.Modes {
		for _, r := range rawCases {
			cases = append(cases, data{
				Mode:    mode,
				rawData: r,
			})
		}

		err := internal.Generate("composer/fail", cases...)
		if err != nil {
			panic(err)
		}
	}
}
