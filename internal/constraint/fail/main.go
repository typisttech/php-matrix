package main

import (
	"os"
	"text/template"

	"github.com/typisttech/php-matrix/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/constraint/fail/main.go"
# Test the "{{ .Name }}" case

! exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }}
! stdout .
cmp stderr stderr.golden

! exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=auto
! stdout .
cmp stderr stderr.golden

! exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=php.net
! stdout .
cmp stderr stderr.golden

! exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=offline
! stdout .
cmp stderr stderr.golden

-- stderr.golden --
`

var rawCases = []rawData{
	{"empty string", ""},

	{"null", "null"},
	{"object", "{}"},
	{"array", "[]"},
	{"true", "true"},
	{"false", "false"},

	{"ruby", "~>1.0"},
	{"empty string", ""},
	{"invalid string", "invalid constraint"},

	{"unsatisfiable/1", ">8.0 <7.0"},
	{"unsatisfiable/2", ">999"},
	{"unsatisfiable/3", "dev-master"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type rawData struct {
	name       string
	Constraint string
}

type data struct {
	Mode string
	rawData
}

func (d data) Name() string {
	return d.name
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	num := len(internal.Modes) * len(rawCases)
	cases := make([]data, 0, num)

	for _, mode := range internal.Modes {
		for _, r := range rawCases {
			cases = append(cases, data{
				Mode:    mode,
				rawData: r,
			})
		}

		err := internal.Generate("constraint/fail", cases...)
		if err != nil {
			panic(err)
		}
	}
}
