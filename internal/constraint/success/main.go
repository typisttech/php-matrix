package main

import (
	"fmt"
	"os"
	"text/template"

	"github.com/typisttech/php-matrix/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/constraint/success/main.go"
# Test the '{{ .Name }}' case

exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }}
cmp stdout stdout.golden
! stderr .

exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=auto
cmp stdout stdout.golden
! stderr .

exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=php.net
cmp stdout stdout.golden
! stderr .

exec php-matrix constraint '{{ .Constraint }}' {{ .Mode }} --source=offline
cmp stdout stdout.golden
! stderr .


-- stdout.golden --
`

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	Mode       string
	Constraint string
}

func (d data) Name() string {
	return fmt.Sprintf("%q__%q", d.Mode, d.Constraint)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	var cases []data
	for _, mode := range internal.Modes {
		for _, constraint := range internal.Constraints {
			cases = append(cases, data{
				Mode:       mode,
				Constraint: constraint,
			})
		}
	}

	err := internal.Generate("constraint/success", cases...)
	if err != nil {
		panic(err)
	}
}
